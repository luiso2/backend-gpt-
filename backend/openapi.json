{
  "openapi": "3.1.0",
  "info": {
    "title": "MERKTOP Content Management API",
    "description": "API for managing MERKTOP website content via ChatGPT. Requires API key authentication.",
    "version": "v2.0.0"
  },
  "servers": [
    {
      "url": "https://backend-production-835f.up.railway.app/api"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/pages": {
      "get": {
        "operationId": "getAllPages",
        "summary": "Get all pages from the website",
        "description": "Returns a list of all pages, optionally filtered by publication status",
        "parameters": [
          {
            "name": "isPublished",
            "in": "query",
            "description": "Filter by publication status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of pages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": { "type": "string" },
                      "slug": { "type": "string" },
                      "title": { "type": "string" },
                      "description": { "type": "string" },
                      "isPublished": { "type": "boolean" },
                      "createdAt": { "type": "string" },
                      "updatedAt": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      },
      "post": {
        "operationId": "createPage",
        "summary": "Create a new page on the website",
        "description": "Creates a new page with the specified content and metadata",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["slug", "title"],
                "properties": {
                  "slug": {
                    "type": "string",
                    "description": "URL-friendly identifier for the page"
                  },
                  "title": {
                    "type": "string",
                    "description": "Page title"
                  },
                  "description": {
                    "type": "string",
                    "description": "Page description for SEO"
                  },
                  "content": {
                    "type": "object",
                    "description": "Page content in structured format"
                  },
                  "isPublished": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the page is published"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Page created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": { "type": "string" },
                    "slug": { "type": "string" },
                    "title": { "type": "string" },
                    "message": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid data"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key"
          }
        }
      }
    },
    "/pages/{slug}": {
      "get": {
        "operationId": "getPageBySlug",
        "summary": "Get a specific page by its slug",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "description": "The slug identifier of the page",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Page retrieved successfully"
          },
          "404": {
            "description": "Page not found"
          }
        }
      },
      "put": {
        "operationId": "updatePage",
        "summary": "Update an existing page",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "content": { "type": "object" },
                  "isPublished": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Page updated successfully" },
          "404": { "description": "Page not found" }
        }
      },
      "delete": {
        "operationId": "deletePage",
        "summary": "Delete a page",
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Page deleted successfully" },
          "404": { "description": "Page not found" }
        }
      }
    },
    "/sections": {
      "get": {
        "operationId": "getAllSections",
        "summary": "Get all sections",
        "parameters": [
          {
            "name": "pageSlug",
            "in": "query",
            "description": "Filter sections by page slug",
            "schema": { "type": "string" }
          },
          {
            "name": "isVisible",
            "in": "query",
            "description": "Filter by visibility status",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Sections retrieved successfully" }
        }
      },
      "post": {
        "operationId": "createSection",
        "summary": "Create a new section",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["pageSlug", "sectionKey", "content"],
                "properties": {
                  "pageSlug": { 
                    "type": "string",
                    "description": "The slug of the page this section belongs to"
                  },
                  "sectionKey": { 
                    "type": "string",
                    "description": "Unique identifier for the section"
                  },
                  "title": { "type": "string" },
                  "content": { "type": "object" },
                  "order": { "type": "integer" },
                  "isVisible": { "type": "boolean", "default": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Section created successfully" }
        }
      }
    },
    "/portfolio": {
      "get": {
        "operationId": "getAllProjects",
        "summary": "Get all portfolio projects",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "isFeatured",
            "in": "query",
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "200": { "description": "Projects retrieved successfully" }
        }
      },
      "post": {
        "operationId": "createProject",
        "summary": "Create a new portfolio project",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description", "category"],
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "category": { 
                    "type": "string",
                    "enum": ["web", "mobile", "automation", "ai", "ecommerce"]
                  },
                  "tags": { 
                    "type": "array", 
                    "items": { "type": "string" }
                  },
                  "technologies": { 
                    "type": "array", 
                    "items": { "type": "string" }
                  },
                  "isFeatured": { "type": "boolean", "default": false },
                  "isPublished": { "type": "boolean", "default": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Project created successfully" }
        }
      }
    },
    "/services": {
      "get": {
        "operationId": "getAllServices",
        "summary": "Get all services offered",
        "responses": {
          "200": { "description": "Services retrieved successfully" }
        }
      },
      "post": {
        "operationId": "createService",
        "summary": "Create a new service",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["title", "description"],
                "properties": {
                  "title": { "type": "string" },
                  "description": { "type": "string" },
                  "features": { 
                    "type": "array", 
                    "items": { "type": "string" },
                    "description": "List of features included in this service"
                  },
                  "isActive": { "type": "boolean", "default": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Service created successfully" }
        }
      }
    },
    "/testimonials": {
      "get": {
        "operationId": "getAllTestimonials",
        "summary": "Get all client testimonials",
        "responses": {
          "200": { "description": "Testimonials retrieved successfully" }
        }
      },
      "post": {
        "operationId": "createTestimonial",
        "summary": "Create a new testimonial",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name", "content"],
                "properties": {
                  "name": { 
                    "type": "string",
                    "description": "Client's name"
                  },
                  "company": { 
                    "type": "string",
                    "description": "Client's company"
                  },
                  "content": { 
                    "type": "string",
                    "description": "Testimonial text"
                  },
                  "rating": { 
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "description": "Rating from 1 to 5 stars"
                  },
                  "isPublished": { "type": "boolean", "default": true }
                }
              }
            }
          }
        },
        "responses": {
          "201": { "description": "Testimonial created successfully" }
        }
      }
    },
    "/config": {
      "get": {
        "operationId": "getAllConfigs",
        "summary": "Get all configuration settings",
        "responses": {
          "200": { "description": "Configurations retrieved successfully" }
        }
      }
    },
    "/config/{key}": {
      "get": {
        "operationId": "getConfig",
        "summary": "Get a specific configuration by key",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "description": "Configuration retrieved successfully" }
        }
      },
      "put": {
        "operationId": "updateConfig",
        "summary": "Update a configuration value",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["value"],
                "properties": {
                  "value": {
                    "description": "The configuration value (can be any type)"
                  },
                  "type": { 
                    "type": "string",
                    "enum": ["string", "number", "boolean", "object", "array"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Configuration updated successfully" }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
        "description": "API key for authentication. Use the value: mkt-gpt-2024-xK9#nR7@pL4*vK8&bT3^wZ5"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "message": { "type": "string" },
          "code": { "type": "string" }
        }
      }
    }
  }
}
